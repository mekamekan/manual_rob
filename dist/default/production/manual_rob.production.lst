

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sat Aug 19 13:26:28 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F1827
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	text0,local,class=CODE,merge=1,delta=2
     6                           	psect	clrtext,global,class=CODE,delta=2
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x220,48
    16                           	dabs	1,0x1A0,80
    17                           	dabs	1,0x20F0,0,_Buffer
    18                           	dabs	1,0x7E,2
    19     0000                     
    20                           ; Version 2.40
    21                           ; Generated 17/11/2021 GMT
    22                           ; 
    23                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution. Publication is not required when
    37                           ;        this file is used in an embedded application.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC16F1827 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55     0000                     	;# 
    56     0001                     	;# 
    57     0002                     	;# 
    58     0003                     	;# 
    59     0004                     	;# 
    60     0005                     	;# 
    61     0006                     	;# 
    62     0007                     	;# 
    63     0008                     	;# 
    64     0009                     	;# 
    65     000A                     	;# 
    66     000B                     	;# 
    67     000C                     	;# 
    68     000D                     	;# 
    69     0011                     	;# 
    70     0012                     	;# 
    71     0013                     	;# 
    72     0014                     	;# 
    73     0015                     	;# 
    74     0016                     	;# 
    75     0016                     	;# 
    76     0017                     	;# 
    77     0018                     	;# 
    78     0019                     	;# 
    79     001A                     	;# 
    80     001B                     	;# 
    81     001C                     	;# 
    82     001E                     	;# 
    83     001F                     	;# 
    84     008C                     	;# 
    85     008D                     	;# 
    86     0091                     	;# 
    87     0092                     	;# 
    88     0093                     	;# 
    89     0094                     	;# 
    90     0095                     	;# 
    91     0096                     	;# 
    92     0097                     	;# 
    93     0098                     	;# 
    94     0099                     	;# 
    95     009A                     	;# 
    96     009B                     	;# 
    97     009B                     	;# 
    98     009C                     	;# 
    99     009D                     	;# 
   100     009E                     	;# 
   101     010C                     	;# 
   102     010D                     	;# 
   103     0111                     	;# 
   104     0112                     	;# 
   105     0113                     	;# 
   106     0114                     	;# 
   107     0115                     	;# 
   108     0116                     	;# 
   109     0117                     	;# 
   110     0118                     	;# 
   111     0119                     	;# 
   112     011A                     	;# 
   113     011B                     	;# 
   114     011D                     	;# 
   115     011E                     	;# 
   116     018C                     	;# 
   117     018D                     	;# 
   118     0191                     	;# 
   119     0191                     	;# 
   120     0192                     	;# 
   121     0193                     	;# 
   122     0193                     	;# 
   123     0193                     	;# 
   124     0194                     	;# 
   125     0195                     	;# 
   126     0196                     	;# 
   127     0199                     	;# 
   128     019A                     	;# 
   129     019B                     	;# 
   130     019B                     	;# 
   131     019B                     	;# 
   132     019B                     	;# 
   133     019C                     	;# 
   134     019C                     	;# 
   135     019D                     	;# 
   136     019E                     	;# 
   137     019F                     	;# 
   138     020C                     	;# 
   139     020D                     	;# 
   140     0211                     	;# 
   141     0211                     	;# 
   142     0212                     	;# 
   143     0212                     	;# 
   144     0213                     	;# 
   145     0213                     	;# 
   146     0214                     	;# 
   147     0214                     	;# 
   148     0215                     	;# 
   149     0215                     	;# 
   150     0215                     	;# 
   151     0216                     	;# 
   152     0216                     	;# 
   153     0217                     	;# 
   154     0217                     	;# 
   155     0219                     	;# 
   156     021A                     	;# 
   157     021B                     	;# 
   158     021C                     	;# 
   159     021D                     	;# 
   160     021E                     	;# 
   161     021F                     	;# 
   162     0291                     	;# 
   163     0291                     	;# 
   164     0292                     	;# 
   165     0293                     	;# 
   166     0294                     	;# 
   167     0295                     	;# 
   168     0295                     	;# 
   169     0296                     	;# 
   170     0298                     	;# 
   171     0298                     	;# 
   172     0299                     	;# 
   173     029A                     	;# 
   174     029B                     	;# 
   175     029C                     	;# 
   176     029C                     	;# 
   177     029D                     	;# 
   178     029E                     	;# 
   179     029E                     	;# 
   180     0311                     	;# 
   181     0311                     	;# 
   182     0312                     	;# 
   183     0313                     	;# 
   184     0318                     	;# 
   185     0318                     	;# 
   186     0319                     	;# 
   187     031A                     	;# 
   188     0394                     	;# 
   189     0395                     	;# 
   190     0396                     	;# 
   191     039A                     	;# 
   192     039C                     	;# 
   193     039D                     	;# 
   194     039E                     	;# 
   195     039F                     	;# 
   196     0415                     	;# 
   197     0416                     	;# 
   198     0417                     	;# 
   199     041C                     	;# 
   200     041D                     	;# 
   201     041E                     	;# 
   202     0FE4                     	;# 
   203     0FE5                     	;# 
   204     0FE6                     	;# 
   205     0FE7                     	;# 
   206     0FE8                     	;# 
   207     0FE9                     	;# 
   208     0FEA                     	;# 
   209     0FEB                     	;# 
   210     0FED                     	;# 
   211     0FEE                     	;# 
   212     0FEF                     	;# 
   213     0000                     	;# 
   214     0001                     	;# 
   215     0002                     	;# 
   216     0003                     	;# 
   217     0004                     	;# 
   218     0005                     	;# 
   219     0006                     	;# 
   220     0007                     	;# 
   221     0008                     	;# 
   222     0009                     	;# 
   223     000A                     	;# 
   224     000B                     	;# 
   225     000C                     	;# 
   226     000D                     	;# 
   227     0011                     	;# 
   228     0012                     	;# 
   229     0013                     	;# 
   230     0014                     	;# 
   231     0015                     	;# 
   232     0016                     	;# 
   233     0016                     	;# 
   234     0017                     	;# 
   235     0018                     	;# 
   236     0019                     	;# 
   237     001A                     	;# 
   238     001B                     	;# 
   239     001C                     	;# 
   240     001E                     	;# 
   241     001F                     	;# 
   242     008C                     	;# 
   243     008D                     	;# 
   244     0091                     	;# 
   245     0092                     	;# 
   246     0093                     	;# 
   247     0094                     	;# 
   248     0095                     	;# 
   249     0096                     	;# 
   250     0097                     	;# 
   251     0098                     	;# 
   252     0099                     	;# 
   253     009A                     	;# 
   254     009B                     	;# 
   255     009B                     	;# 
   256     009C                     	;# 
   257     009D                     	;# 
   258     009E                     	;# 
   259     010C                     	;# 
   260     010D                     	;# 
   261     0111                     	;# 
   262     0112                     	;# 
   263     0113                     	;# 
   264     0114                     	;# 
   265     0115                     	;# 
   266     0116                     	;# 
   267     0117                     	;# 
   268     0118                     	;# 
   269     0119                     	;# 
   270     011A                     	;# 
   271     011B                     	;# 
   272     011D                     	;# 
   273     011E                     	;# 
   274     018C                     	;# 
   275     018D                     	;# 
   276     0191                     	;# 
   277     0191                     	;# 
   278     0192                     	;# 
   279     0193                     	;# 
   280     0193                     	;# 
   281     0193                     	;# 
   282     0194                     	;# 
   283     0195                     	;# 
   284     0196                     	;# 
   285     0199                     	;# 
   286     019A                     	;# 
   287     019B                     	;# 
   288     019B                     	;# 
   289     019B                     	;# 
   290     019B                     	;# 
   291     019C                     	;# 
   292     019C                     	;# 
   293     019D                     	;# 
   294     019E                     	;# 
   295     019F                     	;# 
   296     020C                     	;# 
   297     020D                     	;# 
   298     0211                     	;# 
   299     0211                     	;# 
   300     0212                     	;# 
   301     0212                     	;# 
   302     0213                     	;# 
   303     0213                     	;# 
   304     0214                     	;# 
   305     0214                     	;# 
   306     0215                     	;# 
   307     0215                     	;# 
   308     0215                     	;# 
   309     0216                     	;# 
   310     0216                     	;# 
   311     0217                     	;# 
   312     0217                     	;# 
   313     0219                     	;# 
   314     021A                     	;# 
   315     021B                     	;# 
   316     021C                     	;# 
   317     021D                     	;# 
   318     021E                     	;# 
   319     021F                     	;# 
   320     0291                     	;# 
   321     0291                     	;# 
   322     0292                     	;# 
   323     0293                     	;# 
   324     0294                     	;# 
   325     0295                     	;# 
   326     0295                     	;# 
   327     0296                     	;# 
   328     0298                     	;# 
   329     0298                     	;# 
   330     0299                     	;# 
   331     029A                     	;# 
   332     029B                     	;# 
   333     029C                     	;# 
   334     029C                     	;# 
   335     029D                     	;# 
   336     029E                     	;# 
   337     029E                     	;# 
   338     0311                     	;# 
   339     0311                     	;# 
   340     0312                     	;# 
   341     0313                     	;# 
   342     0318                     	;# 
   343     0318                     	;# 
   344     0319                     	;# 
   345     031A                     	;# 
   346     0394                     	;# 
   347     0395                     	;# 
   348     0396                     	;# 
   349     039A                     	;# 
   350     039C                     	;# 
   351     039D                     	;# 
   352     039E                     	;# 
   353     039F                     	;# 
   354     0415                     	;# 
   355     0416                     	;# 
   356     0417                     	;# 
   357     041C                     	;# 
   358     041D                     	;# 
   359     041E                     	;# 
   360     0FE4                     	;# 
   361     0FE5                     	;# 
   362     0FE6                     	;# 
   363     0FE7                     	;# 
   364     0FE8                     	;# 
   365     0FE9                     	;# 
   366     0FEA                     	;# 
   367     0FEB                     	;# 
   368     0FED                     	;# 
   369     0FEE                     	;# 
   370     0FEF                     	;_Buffer
   371     0011                     _PIR1bits	set	17
   372     0095                     _OPTION_REGbits	set	149
   373     008D                     _TRISB	set	141
   374     008C                     _TRISA	set	140
   375     0099                     _OSCCON	set	153
   376     010D                     _LATB	set	269
   377     010C                     _LATA	set	268
   378     019A                     _TXREG	set	410
   379     0199                     _RCREG	set	409
   380     019D                     _RCSTAbits	set	413
   381     019B                     _SPBRG	set	411
   382     019F                     _BAUDCON	set	415
   383     019D                     _RCSTA	set	413
   384     019E                     _TXSTA	set	414
   385     018D                     _ANSELB	set	397
   386     018C                     _ANSELA	set	396
   387     020D                     _WPUB	set	525
   388     020C                     _WPUA	set	524
   389                           
   390                           	psect	cinit
   391     07F2                     start_initialization:	
   392                           ; #config settings
   393                           
   394     07F2                     __initialization:
   395                           
   396                           ; Clear objects allocated to BIGRAM
   397     07F2  30F0               	movlw	low (0+8432)
   398     07F3  0084               	movwf	4
   399     07F4  3020               	movlw	high (0+8432)
   400     07F5  0085               	movwf	5
   401     07F6  3080               	movlw	128
   402     07F7  00FE               	movwf	btemp
   403     07F8  3000               	movlw	0
   404     07F9  00FF               	movwf	btemp+1
   405     07FA  3187  2736  3187   	fcall	clear_ram0
   406     07FD                     end_of_initialization:	
   407                           ;End of C runtime variable initialization code
   408                           
   409     07FD                     __end_of__initialization:
   410     07FD  0020               	movlb	0
   411     07FE  3187  2F99         	ljmp	_main	;jump to C main() function
   412                           
   413                           	psect	text0
   414     0000                     __ptext0:	;BIGRAM
   415                           
   416                           	psect	clrtext
   417     0736                     clear_ram0:	
   418                           ;	Called with FSR0 containing the base address, and
   419                           ;	btemp/btemp+1 has the size to clear
   420                           
   421     0736  0064               	clrwdt	;clear the watchdog before getting into this loop
   422     0737                     clrloop0:
   423     0737  0180               	clrf	0	;clear RAM location pointed to by FSR
   424     0738  3101               	addfsr 0,1
   425     0739  3001               	movlw	1
   426     073A  02FE               	subwf	btemp,f
   427     073B  3000               	movlw	0
   428     073C  3BFF               	subwfb	btemp+1,f
   429     073D  087F               	movf	btemp+1,w
   430     073E  047E               	iorwf	btemp,w
   431     073F  1D03               	skipz
   432     0740  2F37               	goto	clrloop0	;have we reached the end yet?
   433     0741  3400               	retlw	0	;all done for this memory range, return
   434                           
   435                           	psect	cstackCOMMON
   436     0070                     __pcstackCOMMON:
   437     0070                     ?_EUSART_is_rx_ready:
   438     0070                     ??_EUSART_is_rx_ready:	
   439                           ; 1 bytes @ 0x0
   440                           
   441     0070                     ?_Receive:	
   442                           ; 1 bytes @ 0x0
   443                           
   444     0070                     ?_DataWrite:	
   445                           ; 1 bytes @ 0x0
   446                           
   447     0070                     ??_DataWrite:	
   448                           ; 1 bytes @ 0x0
   449                           
   450     0070                     ?_main:	
   451                           ; 1 bytes @ 0x0
   452                           
   453     0070                     ?_EUSART_Read:	
   454                           ; 1 bytes @ 0x0
   455                           
   456     0070                     ??_EUSART_Read:	
   457                           ; 1 bytes @ 0x0
   458                           
   459     0070                     DataWrite@data:	
   460                           ; 1 bytes @ 0x0
   461                           
   462     0070                     Receive@buf:	
   463                           ; 1 bytes @ 0x0
   464                           
   465                           
   466                           ; 2 bytes @ 0x0
   467     0070                     	ds	2
   468     0072                     ??_Receive:
   469                           
   470                           ; 1 bytes @ 0x2
   471     0072                     	ds	1
   472     0073                     Receive@cnt:
   473                           
   474                           ; 1 bytes @ 0x3
   475     0073                     	ds	1
   476     0074                     Receive@rcv:
   477                           
   478                           ; 1 bytes @ 0x4
   479     0074                     	ds	1
   480     0075                     ??_main:
   481                           
   482                           ; 1 bytes @ 0x5
   483     0075                     	ds	2
   484     0077                     main@i:
   485                           
   486                           ; 2 bytes @ 0x7
   487     0077                     	ds	2
   488                           
   489                           	psect	maintext
   490     0799                     __pmaintext:	
   491 ;;
   492 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   493 ;;
   494 ;; *************** function _main *****************
   495 ;; Defined at:
   496 ;;		line 47 in file "main.c"
   497 ;; Parameters:    Size  Location     Type
   498 ;;		None
   499 ;; Auto vars:     Size  Location     Type
   500 ;;  i               2    7[COMMON] int 
   501 ;; Return value:  Size  Location     Type
   502 ;;                  1    wreg      void 
   503 ;; Registers used:
   504 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   505 ;; Tracked objects:
   506 ;;		On entry : B1F/0
   507 ;;		On exit  : 0/0
   508 ;;		Unchanged: 0/0
   509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   510 ;;      Params:         0       0       0       0       0       0
   511 ;;      Locals:         2       0       0       0       0       0
   512 ;;      Temps:          2       0       0       0       0       0
   513 ;;      Totals:         4       0       0       0       0       0
   514 ;;Total ram usage:        4 bytes
   515 ;; Hardware stack levels required when called: 2
   516 ;; This function calls:
   517 ;;		_DataWrite
   518 ;;		_EUSART_is_rx_ready
   519 ;;		_Receive
   520 ;; This function is called by:
   521 ;;		Startup code after reset
   522 ;; This function uses a non-reentrant model
   523 ;;
   524                           
   525     0799                     _main:	
   526                           ;psect for function _main
   527                           
   528     0799                     l808:	
   529                           ;incstack = 0
   530                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
   531                           
   532                           
   533                           ;main.c: 48:     OSCCON = 0b11110000;
   534     0799  30F0               	movlw	240
   535     079A  0021               	movlb	1	; select bank1
   536     079B  0099               	movwf	25	;volatile
   537     079C                     l810:
   538                           
   539                           ;main.c: 49:     ANSELA = 0x00;
   540     079C  0023               	movlb	3	; select bank3
   541     079D  018C               	clrf	12	;volatile
   542     079E                     l812:
   543                           
   544                           ;main.c: 50:     ANSELB = 0x00;
   545     079E  018D               	clrf	13	;volatile
   546     079F                     l814:
   547                           
   548                           ;main.c: 51:     TRISA = 0x00;
   549     079F  0021               	movlb	1	; select bank1
   550     07A0  018C               	clrf	12	;volatile
   551     07A1                     l816:
   552                           
   553                           ;main.c: 52:     TRISB = 0b00000010;
   554     07A1  3002               	movlw	2
   555     07A2  008D               	movwf	13	;volatile
   556                           
   557                           ;main.c: 53:     LATA = 0x00;
   558     07A3  0022               	movlb	2	; select bank2
   559     07A4  018C               	clrf	12	;volatile
   560                           
   561                           ;main.c: 54:     LATB = 0x00;
   562     07A5  018D               	clrf	13	;volatile
   563     07A6                     l818:
   564                           
   565                           ;main.c: 55:     OPTION_REGbits.nWPUEN = 0;
   566     07A6  0021               	movlb	1	; select bank1
   567     07A7  1395               	bcf	21,7	;volatile
   568                           
   569                           ;main.c: 56:     WPUA = 0x00;
   570     07A8  0024               	movlb	4	; select bank4
   571     07A9  018C               	clrf	12	;volatile
   572                           
   573                           ;main.c: 57:     WPUB = 0x00;
   574     07AA  018D               	clrf	13	;volatile
   575     07AB                     l820:
   576                           
   577                           ;main.c: 59:     TXSTA = 0b00100100;
   578     07AB  3024               	movlw	36
   579     07AC  0023               	movlb	3	; select bank3
   580     07AD  009E               	movwf	30	;volatile
   581     07AE                     l822:
   582                           
   583                           ;main.c: 60:     RCSTA = 0b10010000;
   584     07AE  3090               	movlw	144
   585     07AF  009D               	movwf	29	;volatile
   586     07B0                     l824:
   587                           
   588                           ;main.c: 61:     BAUDCON = 0b00001000;
   589     07B0  3008               	movlw	8
   590     07B1  009F               	movwf	31	;volatile
   591     07B2                     l826:
   592                           
   593                           ;main.c: 62:     SPBRG = 68;
   594     07B2  3044               	movlw	68
   595     07B3  009B               	movwf	27	;volatile
   596     07B4                     l828:
   597                           
   598                           ;main.c: 66:         if(EUSART_is_rx_ready() != 0){
   599     07B4  3187  2726  3187   	fcall	_EUSART_is_rx_ready
   600     07B7  3A00               	xorlw	0
   601     07B8  1903               	skipnz
   602     07B9  2FBB               	goto	u171
   603     07BA  2FBC               	goto	u170
   604     07BB                     u171:
   605     07BB  2FE7               	goto	l840
   606     07BC                     u170:
   607     07BC                     l830:
   608                           
   609                           ;main.c: 67:             Receive(Buffer);
   610     07BC  30F0               	movlw	240
   611     07BD  00F0               	movwf	Receive@buf
   612     07BE  3020               	movlw	32
   613     07BF  00F1               	movwf	Receive@buf+1
   614     07C0  3187  2755  3187   	fcall	_Receive
   615     07C3                     l832:
   616                           
   617                           ;main.c: 68:             for(int i = 0; Buffer[i] != ((void*)0); i++){
   618     07C3  01F7               	clrf	main@i
   619     07C4  01F8               	clrf	main@i+1
   620     07C5  2FD8               	goto	l838
   621     07C6                     l834:
   622                           
   623                           ;main.c: 69:                 DataWrite(Buffer[i]);
   624     07C6  30F0               	movlw	240
   625     07C7  00F5               	movwf	??_main
   626     07C8  3020               	movlw	32
   627     07C9  00F6               	movwf	??_main+1
   628     07CA  0877               	movf	main@i,w
   629     07CB  0775               	addwf	??_main,w
   630     07CC  0086               	movwf	6
   631     07CD  0878               	movf	main@i+1,w
   632     07CE  3D76               	addwfc	??_main+1,w
   633     07CF  0087               	movwf	7
   634     07D0  0801               	movf	1,w
   635     07D1  3187  272B  3187   	fcall	_DataWrite
   636     07D4                     l836:
   637                           
   638                           ;main.c: 70:             }
   639     07D4  3001               	movlw	1
   640     07D5  07F7               	addwf	main@i,f
   641     07D6  3000               	movlw	0
   642     07D7  3DF8               	addwfc	main@i+1,f
   643     07D8                     l838:
   644     07D8  30F0               	movlw	240
   645     07D9  00F5               	movwf	??_main
   646     07DA  3020               	movlw	32
   647     07DB  00F6               	movwf	??_main+1
   648     07DC  0877               	movf	main@i,w
   649     07DD  0775               	addwf	??_main,w
   650     07DE  0086               	movwf	6
   651     07DF  0878               	movf	main@i+1,w
   652     07E0  3D76               	addwfc	??_main+1,w
   653     07E1  0087               	movwf	7
   654     07E2  0801               	movf	1,w
   655     07E3  1D03               	btfss	3,2
   656     07E4  2FE6               	goto	u181
   657     07E5  2FE7               	goto	u180
   658     07E6                     u181:
   659     07E6  2FC6               	goto	l834
   660     07E7                     u180:
   661     07E7                     l840:
   662                           
   663                           ;main.c: 74:         _delay((unsigned long)((10)*(32000000/4000.0)));
   664     07E7  3068               	movlw	104
   665     07E8  00F5               	movwf	??_main
   666     07E9  30E4               	movlw	228
   667     07EA                     u197:
   668     07EA  0B89               	decfsz	9,f
   669     07EB  2FEA               	goto	u197
   670     07EC  0BF5               	decfsz	??_main,f
   671     07ED  2FEA               	goto	u197
   672     07EE  3200               	nop2
   673     07EF  2FB4               	goto	l828
   674     07F0  3180  2802         	ljmp	start
   675     07F2                     __end_of_main:
   676                           
   677                           	psect	text1
   678     0755                     __ptext1:	
   679 ;; *************** function _Receive *****************
   680 ;; Defined at:
   681 ;;		line 98 in file "main.c"
   682 ;; Parameters:    Size  Location     Type
   683 ;;  buf             2    0[COMMON] PTR unsigned char 
   684 ;;		 -> Buffer(128), 
   685 ;; Auto vars:     Size  Location     Type
   686 ;;  rcv             1    4[COMMON] unsigned char 
   687 ;;  cnt             1    3[COMMON] unsigned char 
   688 ;; Return value:  Size  Location     Type
   689 ;;                  1    wreg      void 
   690 ;; Registers used:
   691 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   692 ;; Tracked objects:
   693 ;;		On entry : 0/0
   694 ;;		On exit  : 0/0
   695 ;;		Unchanged: 0/0
   696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   697 ;;      Params:         2       0       0       0       0       0
   698 ;;      Locals:         2       0       0       0       0       0
   699 ;;      Temps:          1       0       0       0       0       0
   700 ;;      Totals:         5       0       0       0       0       0
   701 ;;Total ram usage:        5 bytes
   702 ;; Hardware stack levels used: 1
   703 ;; Hardware stack levels required when called: 1
   704 ;; This function calls:
   705 ;;		_EUSART_Read
   706 ;;		_EUSART_is_rx_ready
   707 ;; This function is called by:
   708 ;;		_main
   709 ;; This function uses a non-reentrant model
   710 ;;
   711                           
   712     0755                     _Receive:	
   713                           ;psect for function _Receive
   714                           
   715     0755                     l782:	
   716                           ;incstack = 0
   717                           ; Regs used in _Receive: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
   718                           
   719                           
   720                           ;main.c: 99:     unsigned char rcv = ((void*)0), cnt = 0;
   721     0755  01F4               	clrf	Receive@rcv
   722     0756  01F3               	clrf	Receive@cnt
   723                           
   724                           ;main.c: 101:     while(rcv != '\n'){
   725     0757  2F7E               	goto	l798
   726     0758                     l784:
   727                           
   728                           ;main.c: 102:         if(EUSART_is_rx_ready() != 0){
   729     0758  3187  2726  3187   	fcall	_EUSART_is_rx_ready
   730     075B  3A00               	xorlw	0
   731     075C  1903               	skipnz
   732     075D  2F5F               	goto	u121
   733     075E  2F60               	goto	u120
   734     075F                     u121:
   735     075F  2F7E               	goto	l798
   736     0760                     u120:
   737     0760                     l786:
   738                           
   739                           ;main.c: 103:             rcv = EUSART_Read();
   740     0760  3187  2742  3187   	fcall	_EUSART_Read
   741     0763  00F4               	movwf	Receive@rcv
   742     0764                     l788:
   743                           
   744                           ;main.c: 104:             if((rcv != '\n') && (rcv != '\r')){
   745     0764  300A               	movlw	10
   746     0765  0674               	xorwf	Receive@rcv,w
   747     0766  1903               	btfsc	3,2
   748     0767  2F69               	goto	u131
   749     0768  2F6A               	goto	u130
   750     0769                     u131:
   751     0769  2F7E               	goto	l798
   752     076A                     u130:
   753     076A                     l790:
   754     076A  300D               	movlw	13
   755     076B  0674               	xorwf	Receive@rcv,w
   756     076C  1903               	btfsc	3,2
   757     076D  2F6F               	goto	u141
   758     076E  2F70               	goto	u140
   759     076F                     u141:
   760     076F  2F7E               	goto	l798
   761     0770                     u140:
   762     0770                     l792:
   763                           
   764                           ;main.c: 105:                 *buf = rcv;
   765     0770  0870               	movf	Receive@buf,w
   766     0771  0086               	movwf	6
   767     0772  0871               	movf	Receive@buf+1,w
   768     0773  0087               	movwf	7
   769     0774  0874               	movf	Receive@rcv,w
   770     0775  0081               	movwf	1
   771     0776                     l794:
   772                           
   773                           ;main.c: 106:                 buf++;
   774     0776  3001               	movlw	1
   775     0777  07F0               	addwf	Receive@buf,f
   776     0778  3000               	movlw	0
   777     0779  3DF1               	addwfc	Receive@buf+1,f
   778     077A                     l796:
   779                           
   780                           ;main.c: 107:                 cnt++;
   781     077A  3001               	movlw	1
   782     077B  00F2               	movwf	??_Receive
   783     077C  0872               	movf	??_Receive,w
   784     077D  07F3               	addwf	Receive@cnt,f
   785     077E                     l798:
   786                           
   787                           ;main.c: 101:     while(rcv != '\n'){
   788     077E  300A               	movlw	10
   789     077F  0674               	xorwf	Receive@rcv,w
   790     0780  1D03               	btfss	3,2
   791     0781  2F83               	goto	u151
   792     0782  2F84               	goto	u150
   793     0783                     u151:
   794     0783  2F58               	goto	l784
   795     0784                     u150:
   796     0784  2F92               	goto	l806
   797     0785                     l800:
   798                           
   799                           ;main.c: 114:         *buf = ((void*)0);
   800     0785  0870               	movf	Receive@buf,w
   801     0786  0086               	movwf	6
   802     0787  0871               	movf	Receive@buf+1,w
   803     0788  0087               	movwf	7
   804     0789  0181               	clrf	1
   805     078A                     l802:
   806                           
   807                           ;main.c: 115:         cnt++;
   808     078A  3001               	movlw	1
   809     078B  00F2               	movwf	??_Receive
   810     078C  0872               	movf	??_Receive,w
   811     078D  07F3               	addwf	Receive@cnt,f
   812     078E                     l804:
   813                           
   814                           ;main.c: 116:         buf++;
   815     078E  3001               	movlw	1
   816     078F  07F0               	addwf	Receive@buf,f
   817     0790  3000               	movlw	0
   818     0791  3DF1               	addwfc	Receive@buf+1,f
   819     0792                     l806:
   820                           
   821                           ;main.c: 112:     while(cnt < 32){
   822     0792  3020               	movlw	32
   823     0793  0273               	subwf	Receive@cnt,w
   824     0794  1C03               	skipc
   825     0795  2F97               	goto	u161
   826     0796  2F98               	goto	u160
   827     0797                     u161:
   828     0797  2F85               	goto	l800
   829     0798                     u160:
   830     0798                     l81:
   831     0798  0008               	return
   832     0799                     __end_of_Receive:
   833                           
   834                           	psect	text2
   835     0726                     __ptext2:	
   836 ;; *************** function _EUSART_is_rx_ready *****************
   837 ;; Defined at:
   838 ;;		line 79 in file "main.c"
   839 ;; Parameters:    Size  Location     Type
   840 ;;		None
   841 ;; Auto vars:     Size  Location     Type
   842 ;;		None
   843 ;; Return value:  Size  Location     Type
   844 ;;                  1    wreg      _Bool 
   845 ;; Registers used:
   846 ;;		wreg, status,2, status,0
   847 ;; Tracked objects:
   848 ;;		On entry : 0/0
   849 ;;		On exit  : 0/0
   850 ;;		Unchanged: 0/0
   851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   852 ;;      Params:         0       0       0       0       0       0
   853 ;;      Locals:         0       0       0       0       0       0
   854 ;;      Temps:          0       0       0       0       0       0
   855 ;;      Totals:         0       0       0       0       0       0
   856 ;;Total ram usage:        0 bytes
   857 ;; Hardware stack levels used: 1
   858 ;; This function calls:
   859 ;;		Nothing
   860 ;; This function is called by:
   861 ;;		_main
   862 ;;		_Receive
   863 ;; This function uses a non-reentrant model
   864 ;;
   865                           
   866     0726                     _EUSART_is_rx_ready:	
   867                           ;psect for function _EUSART_is_rx_ready
   868                           
   869     0726                     l698:	
   870                           ;incstack = 0
   871                           ; Regs used in _EUSART_is_rx_ready: [wreg+status,2+status,0]
   872                           
   873                           
   874                           ;main.c: 81:     return (_Bool)(PIR1bits.RCIF);
   875     0726  0020               	movlb	0	; select bank0
   876     0727  0E11               	swapf	17,w	;volatile
   877     0728  0C89               	rrf	9,f
   878     0729  3901               	andlw	1
   879     072A                     l61:
   880     072A  0008               	return
   881     072B                     __end_of_EUSART_is_rx_ready:
   882                           
   883                           	psect	text3
   884     0742                     __ptext3:	
   885 ;; *************** function _EUSART_Read *****************
   886 ;; Defined at:
   887 ;;		line 84 in file "main.c"
   888 ;; Parameters:    Size  Location     Type
   889 ;;		None
   890 ;; Auto vars:     Size  Location     Type
   891 ;;		None
   892 ;; Return value:  Size  Location     Type
   893 ;;                  1    wreg      unsigned char 
   894 ;; Registers used:
   895 ;;		wreg, status,2
   896 ;; Tracked objects:
   897 ;;		On entry : 0/0
   898 ;;		On exit  : 0/0
   899 ;;		Unchanged: 0/0
   900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   901 ;;      Params:         0       0       0       0       0       0
   902 ;;      Locals:         0       0       0       0       0       0
   903 ;;      Temps:          0       0       0       0       0       0
   904 ;;      Totals:         0       0       0       0       0       0
   905 ;;Total ram usage:        0 bytes
   906 ;; Hardware stack levels used: 1
   907 ;; This function calls:
   908 ;;		Nothing
   909 ;; This function is called by:
   910 ;;		_Receive
   911 ;; This function uses a non-reentrant model
   912 ;;
   913                           
   914     0742                     _EUSART_Read:	
   915                           ;psect for function _EUSART_Read
   916                           
   917     0742                     l702:	
   918                           ;incstack = 0
   919                           ; Regs used in _EUSART_Read: [wreg+status,2]
   920                           
   921     0742                     l64:	
   922                           ;main.c: 87:     {;main.c: 88:     }
   923                           
   924                           
   925                           ;main.c: 86:     while(!PIR1bits.RCIF)
   926     0742  0020               	movlb	0	; select bank0
   927     0743  1E91               	btfss	17,5	;volatile
   928     0744  2F46               	goto	u11
   929     0745  2F47               	goto	u10
   930     0746                     u11:
   931     0746  2F42               	goto	l64
   932     0747                     u10:
   933     0747                     l66:
   934                           
   935                           ;main.c: 90:     if(RCSTAbits.FERR || RCSTAbits.OERR){
   936     0747  0023               	movlb	3	; select bank3
   937     0748  191D               	btfsc	29,2	;volatile
   938     0749  2F4B               	goto	u21
   939     074A  2F4C               	goto	u20
   940     074B                     u21:
   941     074B  2F50               	goto	l706
   942     074C                     u20:
   943     074C                     l704:
   944     074C  1C9D               	btfss	29,1	;volatile
   945     074D  2F4F               	goto	u31
   946     074E  2F50               	goto	u30
   947     074F                     u31:
   948     074F  2F53               	goto	l710
   949     0750                     u30:
   950     0750                     l706:
   951                           
   952                           ;main.c: 91:             RCSTA = 0x00;
   953     0750  019D               	clrf	29	;volatile
   954     0751                     l708:
   955                           
   956                           ;main.c: 92:             RCSTA = 0x90;
   957     0751  3090               	movlw	144
   958     0752  009D               	movwf	29	;volatile
   959     0753                     l710:
   960                           
   961                           ;main.c: 95:     return RCREG;
   962     0753  0819               	movf	25,w	;volatile
   963     0754                     l70:
   964     0754  0008               	return
   965     0755                     __end_of_EUSART_Read:
   966                           
   967                           	psect	text4
   968     072B                     __ptext4:	
   969 ;; *************** function _DataWrite *****************
   970 ;; Defined at:
   971 ;;		line 122 in file "main.c"
   972 ;; Parameters:    Size  Location     Type
   973 ;;  data            1    wreg     unsigned char 
   974 ;; Auto vars:     Size  Location     Type
   975 ;;  data            1    0[COMMON] unsigned char 
   976 ;; Return value:  Size  Location     Type
   977 ;;                  1    wreg      void 
   978 ;; Registers used:
   979 ;;		wreg
   980 ;; Tracked objects:
   981 ;;		On entry : 0/0
   982 ;;		On exit  : 0/0
   983 ;;		Unchanged: 0/0
   984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   985 ;;      Params:         0       0       0       0       0       0
   986 ;;      Locals:         1       0       0       0       0       0
   987 ;;      Temps:          0       0       0       0       0       0
   988 ;;      Totals:         1       0       0       0       0       0
   989 ;;Total ram usage:        1 bytes
   990 ;; Hardware stack levels used: 1
   991 ;; This function calls:
   992 ;;		Nothing
   993 ;; This function is called by:
   994 ;;		_main
   995 ;;		_putch
   996 ;; This function uses a non-reentrant model
   997 ;;
   998                           
   999     072B                     _DataWrite:	
  1000                           ;psect for function _DataWrite
  1001                           
  1002                           
  1003                           ;incstack = 0
  1004                           ; Regs used in _DataWrite: [wreg]
  1005                           ;DataWrite@data stored from wreg
  1006     072B  00F0               	movwf	DataWrite@data
  1007     072C                     l740:
  1008     072C                     l84:	
  1009                           ;main.c: 123:     while(!PIR1bits.TXIF);
  1010                           
  1011     072C  0020               	movlb	0	; select bank0
  1012     072D  1E11               	btfss	17,4	;volatile
  1013     072E  2F30               	goto	u91
  1014     072F  2F31               	goto	u90
  1015     0730                     u91:
  1016     0730  2F2C               	goto	l84
  1017     0731                     u90:
  1018     0731                     l86:
  1019                           
  1020                           ;main.c: 124:     PIR1bits.TXIF = 0;
  1021     0731  1211               	bcf	17,4	;volatile
  1022     0732                     l742:
  1023                           
  1024                           ;main.c: 125:     TXREG = data;
  1025     0732  0870               	movf	DataWrite@data,w
  1026     0733  0023               	movlb	3	; select bank3
  1027     0734  009A               	movwf	26	;volatile
  1028     0735                     l87:
  1029     0735  0008               	return
  1030     0736                     __end_of_DataWrite:
  1031     007E                     btemp	set	126	;btemp
  1032     007E                     wtemp0	set	126
  1033     20F0                     
  1034                           	psect	idloc
  1035                           
  1036                           ;Config register IDLOC0 @ 0x8000
  1037                           ;	unspecified, using default values
  1038     8000                     	org	32768
  1039     8000  3FFF               	dw	16383
  1040                           
  1041                           ;Config register IDLOC1 @ 0x8001
  1042                           ;	unspecified, using default values
  1043     8001                     	org	32769
  1044     8001  3FFF               	dw	16383
  1045                           
  1046                           ;Config register IDLOC2 @ 0x8002
  1047                           ;	unspecified, using default values
  1048     8002                     	org	32770
  1049     8002  3FFF               	dw	16383
  1050                           
  1051                           ;Config register IDLOC3 @ 0x8003
  1052                           ;	unspecified, using default values
  1053     8003                     	org	32771
  1054     8003  3FFF               	dw	16383
  1055                           
  1056                           	psect	config
  1057                           
  1058                           ;Config register CONFIG1 @ 0x8007
  1059                           ;	Oscillator Selection
  1060                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  1061                           ;	Watchdog Timer Enable
  1062                           ;	WDTE = OFF, WDT disabled
  1063                           ;	Power-up Timer Enable
  1064                           ;	PWRTE = ON, PWRT enabled
  1065                           ;	MCLR Pin Function Select
  1066                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  1067                           ;	Flash Program Memory Code Protection
  1068                           ;	CP = OFF, Program memory code protection is disabled
  1069                           ;	Data Memory Code Protection
  1070                           ;	CPD = OFF, Data memory code protection is disabled
  1071                           ;	Brown-out Reset Enable
  1072                           ;	BOREN = ON, Brown-out Reset enabled
  1073                           ;	Clock Out Enable
  1074                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  1075                           ;	Internal/External Switchover
  1076                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1077                           ;	Fail-Safe Clock Monitor Enable
  1078                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1079     8007                     	org	32775
  1080     8007  0FC4               	dw	4036
  1081                           
  1082                           ;Config register CONFIG2 @ 0x8008
  1083                           ;	Flash Memory Self-Write Protection
  1084                           ;	WRT = OFF, Write protection off
  1085                           ;	PLL Enable
  1086                           ;	PLLEN = ON, 4x PLL enabled
  1087                           ;	Stack Overflow/Underflow Reset Enable
  1088                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  1089                           ;	Brown-out Reset Voltage Selection
  1090                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  1091                           ;	Low-Voltage Programming Enable
  1092                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  1093     8008                     	org	32776
  1094     8008  1FFF               	dw	8191

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9       9
    BANK0            80      0       0
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3             0      0       0
    BANK4             0      0       0

Pointer List with Targets:

    Receive@buf	PTR unsigned char  size(2) Largest target is 128
		 -> Buffer(BIGRAM[128]), 


Critical Paths under _main in COMMON

    _main->_Receive

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0     298
                                              5 COMMON     4     4      0
                          _DataWrite
                 _EUSART_is_rx_ready
                            _Receive
 ---------------------------------------------------------------------------------
 (1) _Receive                                              5     3      2     237
                                              0 COMMON     5     3      2
                        _EUSART_Read
                 _EUSART_is_rx_ready
 ---------------------------------------------------------------------------------
 (2) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DataWrite                                            1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DataWrite
   _EUSART_is_rx_ready
   _Receive
     _EUSART_Read
     _EUSART_is_rx_ready

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       9       2       64.3%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       0       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK3                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK4                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sat Aug 19 13:26:28 2023

             DataWrite@data 0070                          l61 072A                          l70 0754  
                        l64 0742                          l81 0798                          l66 0747  
                        l84 072C                          l86 0731                          l87 0735  
                        u10 0747                          u11 0746                          u20 074C  
                        u21 074B                          u30 0750                          u31 074F  
                        u90 0731                          u91 0730                         l710 0753  
                       l702 0742                         l704 074C                         l800 0785  
                       l706 0750                         l802 078A                         l810 079C  
                       l740 072C                         l708 0751                         l804 078E  
                       l820 07AB                         l812 079E                         l742 0732  
                       l806 0792                         l830 07BC                         l822 07AE  
                       l814 079F                         l832 07C3                         l840 07E7  
                       l824 07B0                         l816 07A1                         l808 0799  
                       l834 07C6                         l826 07B2                         l818 07A6  
                       l836 07D4                         l828 07B4                         l790 076A  
                       l782 0755                         l838 07D8                         l792 0770  
                       l784 0758                         l698 0726                         l794 0776  
                       l786 0760                         l796 077A                         l788 0764  
                       l798 077E                         u120 0760                         u121 075F  
                       u130 076A                         u131 0769                         u140 0770  
                       u141 076F                         u150 0784                         u151 0783  
                       u160 0798                         u161 0797                         u170 07BC  
                       u171 07BB                         u180 07E7                         u181 07E6  
                       u197 07EA                         wreg 0009                ?_EUSART_Read 0070  
                      _LATA 010C                        _LATB 010D                        _WPUA 020C  
                      _WPUB 020D                        _main 0799                        fsr0h 0005  
                      fsr1h 0007                        indf0 0000                        fsr0l 0004  
                      indf1 0001                        fsr1l 0006                        btemp 007E  
                      start 0002             __end_of_Receive 0799                       ?_main 0070  
                     _RCREG 0199                       _RCSTA 019D                       _SPBRG 019B  
                     _TRISA 008C                       _TRISB 008D                       _TXREG 019A  
                     _TXSTA 019E                  Receive@buf 0070                  Receive@cnt 0073  
                Receive@rcv 0074                       main@i 0077                       status 0003  
                     wtemp0 007E             __initialization 07F2                __end_of_main 07F2  
                    ??_main 0075                      _ANSELA 018C                      _ANSELB 018D  
__end_of_EUSART_is_rx_ready 072B                      _OSCCON 0099                      _Buffer 20F0  
                 ??_Receive 0072           __end_of_DataWrite 0736     __end_of__initialization 07FD  
            __pcstackCOMMON 0070              _OPTION_REGbits 0095                  __pmaintext 0799  
                   _BAUDCON 019F                     _Receive 0755                     __ptext0 0000  
                   __ptext1 0755                     __ptext2 0726                     __ptext3 0742  
                   __ptext4 072B                     clrloop0 0737        end_of_initialization 07FD  
                 _RCSTAbits 019D          _EUSART_is_rx_ready 0726         ?_EUSART_is_rx_ready 0070  
      ??_EUSART_is_rx_ready 0070                   _DataWrite 072B         start_initialization 07F2  
             ??_EUSART_Read 0070                  ?_DataWrite 0070                 __pbssBIGRAM 20F0  
                 ___latbits 0001         __end_of_EUSART_Read 0755                    ?_Receive 0070  
               ??_DataWrite 0070                   clear_ram0 0736                    _PIR1bits 0011  
               _EUSART_Read 0742  

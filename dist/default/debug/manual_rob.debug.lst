

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sat Aug 19 13:15:38 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F1827
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	text0,local,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x220,32
    17                           	dabs	1,0x1A0,80
    18                           	dabs	1,0x160,16
    19                           	dabs	1,0x20E0,0,_Buffer
    20                           	dabs	1,0x7E,2
    21     0000                     
    22                           ; Version 2.40
    23                           ; Generated 17/11/2021 GMT
    24                           ; 
    25                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution. Publication is not required when
    39                           ;        this file is used in an embedded application.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F1827 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57     0000                     	;# 
    58     0001                     	;# 
    59     0002                     	;# 
    60     0003                     	;# 
    61     0004                     	;# 
    62     0005                     	;# 
    63     0006                     	;# 
    64     0007                     	;# 
    65     0008                     	;# 
    66     0009                     	;# 
    67     000A                     	;# 
    68     000B                     	;# 
    69     000C                     	;# 
    70     000D                     	;# 
    71     0011                     	;# 
    72     0012                     	;# 
    73     0013                     	;# 
    74     0014                     	;# 
    75     0015                     	;# 
    76     0016                     	;# 
    77     0016                     	;# 
    78     0017                     	;# 
    79     0018                     	;# 
    80     0019                     	;# 
    81     001A                     	;# 
    82     001B                     	;# 
    83     001C                     	;# 
    84     001E                     	;# 
    85     001F                     	;# 
    86     008C                     	;# 
    87     008D                     	;# 
    88     0091                     	;# 
    89     0092                     	;# 
    90     0093                     	;# 
    91     0094                     	;# 
    92     0095                     	;# 
    93     0096                     	;# 
    94     0097                     	;# 
    95     0098                     	;# 
    96     0099                     	;# 
    97     009A                     	;# 
    98     009B                     	;# 
    99     009B                     	;# 
   100     009C                     	;# 
   101     009D                     	;# 
   102     009E                     	;# 
   103     010C                     	;# 
   104     010D                     	;# 
   105     0111                     	;# 
   106     0112                     	;# 
   107     0113                     	;# 
   108     0114                     	;# 
   109     0115                     	;# 
   110     0116                     	;# 
   111     0117                     	;# 
   112     0118                     	;# 
   113     0119                     	;# 
   114     011A                     	;# 
   115     011B                     	;# 
   116     011D                     	;# 
   117     011E                     	;# 
   118     018C                     	;# 
   119     018D                     	;# 
   120     0191                     	;# 
   121     0191                     	;# 
   122     0192                     	;# 
   123     0193                     	;# 
   124     0193                     	;# 
   125     0193                     	;# 
   126     0194                     	;# 
   127     0195                     	;# 
   128     0196                     	;# 
   129     0199                     	;# 
   130     019A                     	;# 
   131     019B                     	;# 
   132     019B                     	;# 
   133     019B                     	;# 
   134     019B                     	;# 
   135     019C                     	;# 
   136     019C                     	;# 
   137     019D                     	;# 
   138     019E                     	;# 
   139     019F                     	;# 
   140     020C                     	;# 
   141     020D                     	;# 
   142     0211                     	;# 
   143     0211                     	;# 
   144     0212                     	;# 
   145     0212                     	;# 
   146     0213                     	;# 
   147     0213                     	;# 
   148     0214                     	;# 
   149     0214                     	;# 
   150     0215                     	;# 
   151     0215                     	;# 
   152     0215                     	;# 
   153     0216                     	;# 
   154     0216                     	;# 
   155     0217                     	;# 
   156     0217                     	;# 
   157     0219                     	;# 
   158     021A                     	;# 
   159     021B                     	;# 
   160     021C                     	;# 
   161     021D                     	;# 
   162     021E                     	;# 
   163     021F                     	;# 
   164     0291                     	;# 
   165     0291                     	;# 
   166     0292                     	;# 
   167     0293                     	;# 
   168     0294                     	;# 
   169     0295                     	;# 
   170     0295                     	;# 
   171     0296                     	;# 
   172     0298                     	;# 
   173     0298                     	;# 
   174     0299                     	;# 
   175     029A                     	;# 
   176     029B                     	;# 
   177     029C                     	;# 
   178     029C                     	;# 
   179     029D                     	;# 
   180     029E                     	;# 
   181     029E                     	;# 
   182     0311                     	;# 
   183     0311                     	;# 
   184     0312                     	;# 
   185     0313                     	;# 
   186     0318                     	;# 
   187     0318                     	;# 
   188     0319                     	;# 
   189     031A                     	;# 
   190     0394                     	;# 
   191     0395                     	;# 
   192     0396                     	;# 
   193     039A                     	;# 
   194     039C                     	;# 
   195     039D                     	;# 
   196     039E                     	;# 
   197     039F                     	;# 
   198     0415                     	;# 
   199     0416                     	;# 
   200     0417                     	;# 
   201     041C                     	;# 
   202     041D                     	;# 
   203     041E                     	;# 
   204     0FE4                     	;# 
   205     0FE5                     	;# 
   206     0FE6                     	;# 
   207     0FE7                     	;# 
   208     0FE8                     	;# 
   209     0FE9                     	;# 
   210     0FEA                     	;# 
   211     0FEB                     	;# 
   212     0FED                     	;# 
   213     0FEE                     	;# 
   214     0FEF                     	;# 
   215     0000                     	;# 
   216     0001                     	;# 
   217     0002                     	;# 
   218     0003                     	;# 
   219     0004                     	;# 
   220     0005                     	;# 
   221     0006                     	;# 
   222     0007                     	;# 
   223     0008                     	;# 
   224     0009                     	;# 
   225     000A                     	;# 
   226     000B                     	;# 
   227     000C                     	;# 
   228     000D                     	;# 
   229     0011                     	;# 
   230     0012                     	;# 
   231     0013                     	;# 
   232     0014                     	;# 
   233     0015                     	;# 
   234     0016                     	;# 
   235     0016                     	;# 
   236     0017                     	;# 
   237     0018                     	;# 
   238     0019                     	;# 
   239     001A                     	;# 
   240     001B                     	;# 
   241     001C                     	;# 
   242     001E                     	;# 
   243     001F                     	;# 
   244     008C                     	;# 
   245     008D                     	;# 
   246     0091                     	;# 
   247     0092                     	;# 
   248     0093                     	;# 
   249     0094                     	;# 
   250     0095                     	;# 
   251     0096                     	;# 
   252     0097                     	;# 
   253     0098                     	;# 
   254     0099                     	;# 
   255     009A                     	;# 
   256     009B                     	;# 
   257     009B                     	;# 
   258     009C                     	;# 
   259     009D                     	;# 
   260     009E                     	;# 
   261     010C                     	;# 
   262     010D                     	;# 
   263     0111                     	;# 
   264     0112                     	;# 
   265     0113                     	;# 
   266     0114                     	;# 
   267     0115                     	;# 
   268     0116                     	;# 
   269     0117                     	;# 
   270     0118                     	;# 
   271     0119                     	;# 
   272     011A                     	;# 
   273     011B                     	;# 
   274     011D                     	;# 
   275     011E                     	;# 
   276     018C                     	;# 
   277     018D                     	;# 
   278     0191                     	;# 
   279     0191                     	;# 
   280     0192                     	;# 
   281     0193                     	;# 
   282     0193                     	;# 
   283     0193                     	;# 
   284     0194                     	;# 
   285     0195                     	;# 
   286     0196                     	;# 
   287     0199                     	;# 
   288     019A                     	;# 
   289     019B                     	;# 
   290     019B                     	;# 
   291     019B                     	;# 
   292     019B                     	;# 
   293     019C                     	;# 
   294     019C                     	;# 
   295     019D                     	;# 
   296     019E                     	;# 
   297     019F                     	;# 
   298     020C                     	;# 
   299     020D                     	;# 
   300     0211                     	;# 
   301     0211                     	;# 
   302     0212                     	;# 
   303     0212                     	;# 
   304     0213                     	;# 
   305     0213                     	;# 
   306     0214                     	;# 
   307     0214                     	;# 
   308     0215                     	;# 
   309     0215                     	;# 
   310     0215                     	;# 
   311     0216                     	;# 
   312     0216                     	;# 
   313     0217                     	;# 
   314     0217                     	;# 
   315     0219                     	;# 
   316     021A                     	;# 
   317     021B                     	;# 
   318     021C                     	;# 
   319     021D                     	;# 
   320     021E                     	;# 
   321     021F                     	;# 
   322     0291                     	;# 
   323     0291                     	;# 
   324     0292                     	;# 
   325     0293                     	;# 
   326     0294                     	;# 
   327     0295                     	;# 
   328     0295                     	;# 
   329     0296                     	;# 
   330     0298                     	;# 
   331     0298                     	;# 
   332     0299                     	;# 
   333     029A                     	;# 
   334     029B                     	;# 
   335     029C                     	;# 
   336     029C                     	;# 
   337     029D                     	;# 
   338     029E                     	;# 
   339     029E                     	;# 
   340     0311                     	;# 
   341     0311                     	;# 
   342     0312                     	;# 
   343     0313                     	;# 
   344     0318                     	;# 
   345     0318                     	;# 
   346     0319                     	;# 
   347     031A                     	;# 
   348     0394                     	;# 
   349     0395                     	;# 
   350     0396                     	;# 
   351     039A                     	;# 
   352     039C                     	;# 
   353     039D                     	;# 
   354     039E                     	;# 
   355     039F                     	;# 
   356     0415                     	;# 
   357     0416                     	;# 
   358     0417                     	;# 
   359     041C                     	;# 
   360     041D                     	;# 
   361     041E                     	;# 
   362     0FE4                     	;# 
   363     0FE5                     	;# 
   364     0FE6                     	;# 
   365     0FE7                     	;# 
   366     0FE8                     	;# 
   367     0FE9                     	;# 
   368     0FEA                     	;# 
   369     0FEB                     	;# 
   370     0FED                     	;# 
   371     0FEE                     	;# 
   372     0FEF                     	;_Buffer
   373     0011                     _PIR1bits	set	17
   374     0095                     _OPTION_REGbits	set	149
   375     008D                     _TRISB	set	141
   376     008C                     _TRISA	set	140
   377     0099                     _OSCCON	set	153
   378     010D                     _LATB	set	269
   379     010C                     _LATA	set	268
   380     019A                     _TXREG	set	410
   381     0199                     _RCREG	set	409
   382     019D                     _RCSTAbits	set	413
   383     019B                     _SPBRG	set	411
   384     019F                     _BAUDCON	set	415
   385     019D                     _RCSTA	set	413
   386     019E                     _TXSTA	set	414
   387     018D                     _ANSELB	set	397
   388     018C                     _ANSELA	set	396
   389     020D                     _WPUB	set	525
   390     020C                     _WPUA	set	524
   391                           
   392                           	psect	cinit
   393     07F1                     start_initialization:	
   394                           ; #config settings
   395                           
   396     07F1                     __initialization:
   397                           
   398                           ; Clear objects allocated to BIGRAM
   399     07F1  30E0               	movlw	low (0+8416)
   400     07F2  0084               	movwf	4
   401     07F3  3020               	movlw	high (0+8416)
   402     07F4  0085               	movwf	5
   403     07F5  3080               	movlw	128
   404     07F6  00FE               	movwf	btemp
   405     07F7  3000               	movlw	0
   406     07F8  00FF               	movwf	btemp+1
   407     07F9  3187  2755  3187   	fcall	clear_ram0
   408                           
   409                           ; Clear objects allocated to COMMON
   410     07FC  01F6               	clrf	__pbssCOMMON& (0+127)
   411     07FD                     end_of_initialization:	
   412                           ;End of C runtime variable initialization code
   413                           
   414     07FD                     __end_of__initialization:
   415     07FD  0020               	movlb	0
   416     07FE  3187  2F74         	ljmp	_main	;jump to C main() function
   417                           
   418                           	psect	text0
   419     0000                     __ptext0:	;BIGRAM
   420                           
   421                           	psect	bssCOMMON
   422     0076                     __pbssCOMMON:
   423     0076                     _g_ReadData:
   424     0076                     	ds	1
   425                           
   426                           	psect	clrtext
   427     0755                     clear_ram0:	
   428                           ;	Called with FSR0 containing the base address, and
   429                           ;	btemp/btemp+1 has the size to clear
   430                           
   431     0755  0064               	clrwdt	;clear the watchdog before getting into this loop
   432     0756                     clrloop0:
   433     0756  0180               	clrf	0	;clear RAM location pointed to by FSR
   434     0757  3101               	addfsr 0,1
   435     0758  3001               	movlw	1
   436     0759  02FE               	subwf	btemp,f
   437     075A  3000               	movlw	0
   438     075B  3BFF               	subwfb	btemp+1,f
   439     075C  087F               	movf	btemp+1,w
   440     075D  047E               	iorwf	btemp,w
   441     075E  1D03               	skipz
   442     075F  2F56               	goto	clrloop0	;have we reached the end yet?
   443     0760  3400               	retlw	0	;all done for this memory range, return
   444                           
   445                           	psect	cstackCOMMON
   446     0070                     __pcstackCOMMON:
   447     0070                     ?_EUSART_is_rx_ready:
   448     0070                     ??_EUSART_is_rx_ready:	
   449                           ; 1 bytes @ 0x0
   450                           
   451     0070                     ?_Receive:	
   452                           ; 1 bytes @ 0x0
   453                           
   454     0070                     ?_DataWrite:	
   455                           ; 1 bytes @ 0x0
   456                           
   457     0070                     ??_DataWrite:	
   458                           ; 1 bytes @ 0x0
   459                           
   460     0070                     ?_main:	
   461                           ; 1 bytes @ 0x0
   462                           
   463     0070                     ?_EUSART_Read:	
   464                           ; 1 bytes @ 0x0
   465                           
   466     0070                     ??_EUSART_Read:	
   467                           ; 1 bytes @ 0x0
   468                           
   469     0070                     DataWrite@data:	
   470                           ; 1 bytes @ 0x0
   471                           
   472     0070                     Receive@buf:	
   473                           ; 1 bytes @ 0x0
   474                           
   475                           
   476                           ; 2 bytes @ 0x0
   477     0070                     	ds	2
   478     0072                     ??_Receive:
   479                           
   480                           ; 1 bytes @ 0x2
   481     0072                     	ds	1
   482     0073                     Receive@cnt:
   483                           
   484                           ; 1 bytes @ 0x3
   485     0073                     	ds	1
   486     0074                     Receive@rcv:
   487                           
   488                           ; 1 bytes @ 0x4
   489     0074                     	ds	1
   490     0075                     ??_main:
   491                           
   492                           ; 1 bytes @ 0x5
   493     0075                     	ds	1
   494                           
   495                           	psect	maintext
   496     0774                     __pmaintext:	
   497 ;;
   498 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   499 ;;
   500 ;; *************** function _main *****************
   501 ;; Defined at:
   502 ;;		line 51 in file "main.c"
   503 ;; Parameters:    Size  Location     Type
   504 ;;		None
   505 ;; Auto vars:     Size  Location     Type
   506 ;;		None
   507 ;; Return value:  Size  Location     Type
   508 ;;                  1    wreg      void 
   509 ;; Registers used:
   510 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   511 ;; Tracked objects:
   512 ;;		On entry : B1F/0
   513 ;;		On exit  : 0/0
   514 ;;		Unchanged: 0/0
   515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   516 ;;      Params:         0       0       0       0       0       0
   517 ;;      Locals:         0       0       0       0       0       0
   518 ;;      Temps:          1       0       0       0       0       0
   519 ;;      Totals:         1       0       0       0       0       0
   520 ;;Total ram usage:        1 bytes
   521 ;; Hardware stack levels required when called: 2
   522 ;; This function calls:
   523 ;;		_DataWrite
   524 ;;		_EUSART_is_rx_ready
   525 ;;		_Receive
   526 ;; This function is called by:
   527 ;;		Startup code after reset
   528 ;; This function uses a non-reentrant model
   529 ;;
   530                           
   531     0774                     _main:	
   532                           ;psect for function _main
   533                           
   534     0774                     l801:	
   535                           ;incstack = 0
   536                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
   537                           
   538                           
   539                           ;main.c: 52:     OSCCON = 0b11110000;
   540     0774  30F0               	movlw	240
   541     0775  0021               	movlb	1	; select bank1
   542     0776  0099               	movwf	25	;volatile
   543     0777                     l803:
   544                           
   545                           ;main.c: 53:     ANSELA = 0x00;
   546     0777  0023               	movlb	3	; select bank3
   547     0778  018C               	clrf	12	;volatile
   548     0779                     l805:
   549                           
   550                           ;main.c: 54:     ANSELB = 0x00;
   551     0779  018D               	clrf	13	;volatile
   552     077A                     l807:
   553                           
   554                           ;main.c: 55:     TRISA = 0x00;
   555     077A  0021               	movlb	1	; select bank1
   556     077B  018C               	clrf	12	;volatile
   557     077C                     l809:
   558                           
   559                           ;main.c: 56:     TRISB = 0b00000010;
   560     077C  3002               	movlw	2
   561     077D  008D               	movwf	13	;volatile
   562                           
   563                           ;main.c: 57:     LATA = 0x00;
   564     077E  0022               	movlb	2	; select bank2
   565     077F  018C               	clrf	12	;volatile
   566                           
   567                           ;main.c: 58:     LATB = 0x00;
   568     0780  018D               	clrf	13	;volatile
   569     0781                     l811:
   570                           
   571                           ;main.c: 59:     OPTION_REGbits.nWPUEN = 0;
   572     0781  0021               	movlb	1	; select bank1
   573     0782  1395               	bcf	21,7	;volatile
   574                           
   575                           ;main.c: 60:     WPUA = 0x00;
   576     0783  0024               	movlb	4	; select bank4
   577     0784  018C               	clrf	12	;volatile
   578                           
   579                           ;main.c: 61:     WPUB = 0x00;
   580     0785  018D               	clrf	13	;volatile
   581     0786                     l813:
   582                           
   583                           ;main.c: 63:     TXSTA = 0b00100100;
   584     0786  3024               	movlw	36
   585     0787  0023               	movlb	3	; select bank3
   586     0788  009E               	movwf	30	;volatile
   587     0789                     l815:
   588                           
   589                           ;main.c: 64:     RCSTA = 0b10010000;
   590     0789  3090               	movlw	144
   591     078A  009D               	movwf	29	;volatile
   592     078B                     l817:
   593                           
   594                           ;main.c: 65:     BAUDCON = 0b00001000;
   595     078B  3008               	movlw	8
   596     078C  009F               	movwf	31	;volatile
   597     078D                     l819:
   598                           
   599                           ;main.c: 66:     SPBRG = 68;
   600     078D  3044               	movlw	68
   601     078E  009B               	movwf	27	;volatile
   602     078F                     l821:
   603                           
   604                           ;main.c: 76:         if(EUSART_is_rx_ready() != 0){
   605     078F  3187  2745  3187   	fcall	_EUSART_is_rx_ready
   606     0792  3A00               	xorlw	0
   607     0793  1903               	skipnz
   608     0794  2F96               	goto	u161
   609     0795  2F97               	goto	u160
   610     0796                     u161:
   611     0796  2F9E               	goto	l825
   612     0797                     u160:
   613     0797                     l823:
   614                           
   615                           ;main.c: 77:             Receive(Buffer);
   616     0797  30E0               	movlw	224
   617     0798  00F0               	movwf	Receive@buf
   618     0799  3020               	movlw	32
   619     079A  00F1               	movwf	Receive@buf+1
   620     079B  3187  27AD  3187   	fcall	_Receive
   621     079E                     l825:
   622                           
   623                           ;main.c: 81:         DataWrite('a');
   624     079E  3061               	movlw	97
   625     079F  3187  274A  3187   	fcall	_DataWrite
   626     07A2                     l827:
   627                           
   628                           ;main.c: 87:         _delay((unsigned long)((10)*(32000000/4000.0)));
   629     07A2  3068               	movlw	104
   630     07A3  00F5               	movwf	??_main
   631     07A4  30E4               	movlw	228
   632     07A5                     u177:
   633     07A5  0B89               	decfsz	9,f
   634     07A6  2FA5               	goto	u177
   635     07A7  0BF5               	decfsz	??_main,f
   636     07A8  2FA5               	goto	u177
   637     07A9  3200               	nop2
   638     07AA  2F8F               	goto	l821
   639     07AB  3180  2803         	ljmp	start
   640     07AD                     __end_of_main:
   641                           
   642                           	psect	text1
   643     07AD                     __ptext1:	
   644 ;; *************** function _Receive *****************
   645 ;; Defined at:
   646 ;;		line 129 in file "main.c"
   647 ;; Parameters:    Size  Location     Type
   648 ;;  buf             2    0[COMMON] PTR unsigned char 
   649 ;;		 -> Buffer(128), 
   650 ;; Auto vars:     Size  Location     Type
   651 ;;  rcv             1    4[COMMON] unsigned char 
   652 ;;  cnt             1    3[COMMON] unsigned char 
   653 ;; Return value:  Size  Location     Type
   654 ;;                  1    wreg      void 
   655 ;; Registers used:
   656 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   657 ;; Tracked objects:
   658 ;;		On entry : 0/0
   659 ;;		On exit  : 0/0
   660 ;;		Unchanged: 0/0
   661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   662 ;;      Params:         2       0       0       0       0       0
   663 ;;      Locals:         2       0       0       0       0       0
   664 ;;      Temps:          1       0       0       0       0       0
   665 ;;      Totals:         5       0       0       0       0       0
   666 ;;Total ram usage:        5 bytes
   667 ;; Hardware stack levels used: 1
   668 ;; Hardware stack levels required when called: 1
   669 ;; This function calls:
   670 ;;		_EUSART_Read
   671 ;;		_EUSART_is_rx_ready
   672 ;; This function is called by:
   673 ;;		_main
   674 ;; This function uses a non-reentrant model
   675 ;;
   676                           
   677     07AD                     _Receive:	
   678                           ;psect for function _Receive
   679                           
   680     07AD                     l775:	
   681                           ;incstack = 0
   682                           ; Regs used in _Receive: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
   683                           
   684                           
   685                           ;main.c: 130:     unsigned char rcv = ((void*)0), cnt = 0;
   686     07AD  01F4               	clrf	Receive@rcv
   687     07AE  01F3               	clrf	Receive@cnt
   688                           
   689                           ;main.c: 132:     while(rcv != '\n'){
   690     07AF  2FD6               	goto	l791
   691     07B0                     l777:
   692                           
   693                           ;main.c: 133:         if(EUSART_is_rx_ready() != 0){
   694     07B0  3187  2745  3187   	fcall	_EUSART_is_rx_ready
   695     07B3  3A00               	xorlw	0
   696     07B4  1903               	skipnz
   697     07B5  2FB7               	goto	u111
   698     07B6  2FB8               	goto	u110
   699     07B7                     u111:
   700     07B7  2FD6               	goto	l791
   701     07B8                     u110:
   702     07B8                     l779:
   703                           
   704                           ;main.c: 134:             rcv = EUSART_Read();
   705     07B8  3187  2761  3187   	fcall	_EUSART_Read
   706     07BB  00F4               	movwf	Receive@rcv
   707     07BC                     l781:
   708                           
   709                           ;main.c: 135:             if((rcv != '\n') && (rcv != '\r')){
   710     07BC  300A               	movlw	10
   711     07BD  0674               	xorwf	Receive@rcv,w
   712     07BE  1903               	btfsc	3,2
   713     07BF  2FC1               	goto	u121
   714     07C0  2FC2               	goto	u120
   715     07C1                     u121:
   716     07C1  2FD6               	goto	l791
   717     07C2                     u120:
   718     07C2                     l783:
   719     07C2  300D               	movlw	13
   720     07C3  0674               	xorwf	Receive@rcv,w
   721     07C4  1903               	btfsc	3,2
   722     07C5  2FC7               	goto	u131
   723     07C6  2FC8               	goto	u130
   724     07C7                     u131:
   725     07C7  2FD6               	goto	l791
   726     07C8                     u130:
   727     07C8                     l785:
   728                           
   729                           ;main.c: 136:                 *buf = rcv;
   730     07C8  0870               	movf	Receive@buf,w
   731     07C9  0086               	movwf	6
   732     07CA  0871               	movf	Receive@buf+1,w
   733     07CB  0087               	movwf	7
   734     07CC  0874               	movf	Receive@rcv,w
   735     07CD  0081               	movwf	1
   736     07CE                     l787:
   737                           
   738                           ;main.c: 137:                 buf++;
   739     07CE  3001               	movlw	1
   740     07CF  07F0               	addwf	Receive@buf,f
   741     07D0  3000               	movlw	0
   742     07D1  3DF1               	addwfc	Receive@buf+1,f
   743     07D2                     l789:
   744                           
   745                           ;main.c: 138:                 cnt++;
   746     07D2  3001               	movlw	1
   747     07D3  00F2               	movwf	??_Receive
   748     07D4  0872               	movf	??_Receive,w
   749     07D5  07F3               	addwf	Receive@cnt,f
   750     07D6                     l791:
   751                           
   752                           ;main.c: 132:     while(rcv != '\n'){
   753     07D6  300A               	movlw	10
   754     07D7  0674               	xorwf	Receive@rcv,w
   755     07D8  1D03               	btfss	3,2
   756     07D9  2FDB               	goto	u141
   757     07DA  2FDC               	goto	u140
   758     07DB                     u141:
   759     07DB  2FB0               	goto	l777
   760     07DC                     u140:
   761     07DC  2FEA               	goto	l799
   762     07DD                     l793:
   763                           
   764                           ;main.c: 145:         *buf = ((void*)0);
   765     07DD  0870               	movf	Receive@buf,w
   766     07DE  0086               	movwf	6
   767     07DF  0871               	movf	Receive@buf+1,w
   768     07E0  0087               	movwf	7
   769     07E1  0181               	clrf	1
   770     07E2                     l795:
   771                           
   772                           ;main.c: 146:         cnt++;
   773     07E2  3001               	movlw	1
   774     07E3  00F2               	movwf	??_Receive
   775     07E4  0872               	movf	??_Receive,w
   776     07E5  07F3               	addwf	Receive@cnt,f
   777     07E6                     l797:
   778                           
   779                           ;main.c: 147:         buf++;
   780     07E6  3001               	movlw	1
   781     07E7  07F0               	addwf	Receive@buf,f
   782     07E8  3000               	movlw	0
   783     07E9  3DF1               	addwfc	Receive@buf+1,f
   784     07EA                     l799:
   785                           
   786                           ;main.c: 143:     while(cnt < 32){
   787     07EA  3020               	movlw	32
   788     07EB  0273               	subwf	Receive@cnt,w
   789     07EC  1C03               	skipc
   790     07ED  2FEF               	goto	u151
   791     07EE  2FF0               	goto	u150
   792     07EF                     u151:
   793     07EF  2FDD               	goto	l793
   794     07F0                     u150:
   795     07F0                     l80:
   796     07F0  0008               	return
   797     07F1                     __end_of_Receive:
   798                           
   799                           	psect	text2
   800     0745                     __ptext2:	
   801 ;; *************** function _EUSART_is_rx_ready *****************
   802 ;; Defined at:
   803 ;;		line 110 in file "main.c"
   804 ;; Parameters:    Size  Location     Type
   805 ;;		None
   806 ;; Auto vars:     Size  Location     Type
   807 ;;		None
   808 ;; Return value:  Size  Location     Type
   809 ;;                  1    wreg      _Bool 
   810 ;; Registers used:
   811 ;;		wreg, status,2, status,0
   812 ;; Tracked objects:
   813 ;;		On entry : 0/0
   814 ;;		On exit  : 0/0
   815 ;;		Unchanged: 0/0
   816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   817 ;;      Params:         0       0       0       0       0       0
   818 ;;      Locals:         0       0       0       0       0       0
   819 ;;      Temps:          0       0       0       0       0       0
   820 ;;      Totals:         0       0       0       0       0       0
   821 ;;Total ram usage:        0 bytes
   822 ;; Hardware stack levels used: 1
   823 ;; This function calls:
   824 ;;		Nothing
   825 ;; This function is called by:
   826 ;;		_main
   827 ;;		_Receive
   828 ;; This function uses a non-reentrant model
   829 ;;
   830                           
   831     0745                     _EUSART_is_rx_ready:	
   832                           ;psect for function _EUSART_is_rx_ready
   833                           
   834     0745                     l697:	
   835                           ;incstack = 0
   836                           ; Regs used in _EUSART_is_rx_ready: [wreg+status,2+status,0]
   837                           
   838                           
   839                           ;main.c: 112:     return (_Bool)(PIR1bits.RCIF);
   840     0745  0020               	movlb	0	; select bank0
   841     0746  0E11               	swapf	17,w	;volatile
   842     0747  0C89               	rrf	9,f
   843     0748  3901               	andlw	1
   844     0749                     l60:
   845     0749  0008               	return
   846     074A                     __end_of_EUSART_is_rx_ready:
   847                           
   848                           	psect	text3
   849     0761                     __ptext3:	
   850 ;; *************** function _EUSART_Read *****************
   851 ;; Defined at:
   852 ;;		line 115 in file "main.c"
   853 ;; Parameters:    Size  Location     Type
   854 ;;		None
   855 ;; Auto vars:     Size  Location     Type
   856 ;;		None
   857 ;; Return value:  Size  Location     Type
   858 ;;                  1    wreg      unsigned char 
   859 ;; Registers used:
   860 ;;		wreg, status,2
   861 ;; Tracked objects:
   862 ;;		On entry : 0/0
   863 ;;		On exit  : 0/0
   864 ;;		Unchanged: 0/0
   865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   866 ;;      Params:         0       0       0       0       0       0
   867 ;;      Locals:         0       0       0       0       0       0
   868 ;;      Temps:          0       0       0       0       0       0
   869 ;;      Totals:         0       0       0       0       0       0
   870 ;;Total ram usage:        0 bytes
   871 ;; Hardware stack levels used: 1
   872 ;; This function calls:
   873 ;;		Nothing
   874 ;; This function is called by:
   875 ;;		_Receive
   876 ;; This function uses a non-reentrant model
   877 ;;
   878                           
   879     0761                     _EUSART_Read:	
   880                           ;psect for function _EUSART_Read
   881                           
   882     0761                     l701:	
   883                           ;incstack = 0
   884                           ; Regs used in _EUSART_Read: [wreg+status,2]
   885                           
   886     0761                     l63:	
   887                           ;main.c: 118:     {;main.c: 119:     }
   888                           
   889                           
   890                           ;main.c: 117:     while(!PIR1bits.RCIF)
   891     0761  0020               	movlb	0	; select bank0
   892     0762  1E91               	btfss	17,5	;volatile
   893     0763  2F65               	goto	u11
   894     0764  2F66               	goto	u10
   895     0765                     u11:
   896     0765  2F61               	goto	l63
   897     0766                     u10:
   898     0766                     l65:
   899                           
   900                           ;main.c: 121:     if(RCSTAbits.FERR || RCSTAbits.OERR){
   901     0766  0023               	movlb	3	; select bank3
   902     0767  191D               	btfsc	29,2	;volatile
   903     0768  2F6A               	goto	u21
   904     0769  2F6B               	goto	u20
   905     076A                     u21:
   906     076A  2F6F               	goto	l705
   907     076B                     u20:
   908     076B                     l703:
   909     076B  1C9D               	btfss	29,1	;volatile
   910     076C  2F6E               	goto	u31
   911     076D  2F6F               	goto	u30
   912     076E                     u31:
   913     076E  2F72               	goto	l709
   914     076F                     u30:
   915     076F                     l705:
   916                           
   917                           ;main.c: 122:             RCSTA = 0x00;
   918     076F  019D               	clrf	29	;volatile
   919     0770                     l707:
   920                           
   921                           ;main.c: 123:             RCSTA = 0x90;
   922     0770  3090               	movlw	144
   923     0771  009D               	movwf	29	;volatile
   924     0772                     l709:
   925                           
   926                           ;main.c: 126:     return RCREG;
   927     0772  0819               	movf	25,w	;volatile
   928     0773                     l69:
   929     0773  0008               	return
   930     0774                     __end_of_EUSART_Read:
   931                           
   932                           	psect	text4
   933     074A                     __ptext4:	
   934 ;; *************** function _DataWrite *****************
   935 ;; Defined at:
   936 ;;		line 154 in file "main.c"
   937 ;; Parameters:    Size  Location     Type
   938 ;;  data            1    wreg     unsigned char 
   939 ;; Auto vars:     Size  Location     Type
   940 ;;  data            1    0[COMMON] unsigned char 
   941 ;; Return value:  Size  Location     Type
   942 ;;                  1    wreg      void 
   943 ;; Registers used:
   944 ;;		wreg
   945 ;; Tracked objects:
   946 ;;		On entry : 0/0
   947 ;;		On exit  : 0/0
   948 ;;		Unchanged: 0/0
   949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   950 ;;      Params:         0       0       0       0       0       0
   951 ;;      Locals:         1       0       0       0       0       0
   952 ;;      Temps:          0       0       0       0       0       0
   953 ;;      Totals:         1       0       0       0       0       0
   954 ;;Total ram usage:        1 bytes
   955 ;; Hardware stack levels used: 1
   956 ;; This function calls:
   957 ;;		Nothing
   958 ;; This function is called by:
   959 ;;		_main
   960 ;;		_putch
   961 ;; This function uses a non-reentrant model
   962 ;;
   963                           
   964     074A                     _DataWrite:	
   965                           ;psect for function _DataWrite
   966                           
   967                           
   968                           ;incstack = 0
   969                           ; Regs used in _DataWrite: [wreg]
   970                           ;DataWrite@data stored from wreg
   971     074A  00F0               	movwf	DataWrite@data
   972     074B                     l739:
   973     074B                     l83:	
   974                           ;main.c: 155:     while(!PIR1bits.TXIF);
   975                           
   976     074B  0020               	movlb	0	; select bank0
   977     074C  1E11               	btfss	17,4	;volatile
   978     074D  2F4F               	goto	u91
   979     074E  2F50               	goto	u90
   980     074F                     u91:
   981     074F  2F4B               	goto	l83
   982     0750                     u90:
   983     0750                     l85:
   984                           
   985                           ;main.c: 156:     PIR1bits.TXIF = 0;
   986     0750  1211               	bcf	17,4	;volatile
   987     0751                     l741:
   988                           
   989                           ;main.c: 157:     TXREG = data;
   990     0751  0870               	movf	DataWrite@data,w
   991     0752  0023               	movlb	3	; select bank3
   992     0753  009A               	movwf	26	;volatile
   993     0754                     l86:
   994     0754  0008               	return
   995     0755                     __end_of_DataWrite:
   996     007E                     btemp	set	126	;btemp
   997     007E                     wtemp0	set	126
   998     20E0                     
   999                           	psect	idloc
  1000                           
  1001                           ;Config register IDLOC0 @ 0x8000
  1002                           ;	unspecified, using default values
  1003     8000                     	org	32768
  1004     8000  3FFF               	dw	16383
  1005                           
  1006                           ;Config register IDLOC1 @ 0x8001
  1007                           ;	unspecified, using default values
  1008     8001                     	org	32769
  1009     8001  3FFF               	dw	16383
  1010                           
  1011                           ;Config register IDLOC2 @ 0x8002
  1012                           ;	unspecified, using default values
  1013     8002                     	org	32770
  1014     8002  3FFF               	dw	16383
  1015                           
  1016                           ;Config register IDLOC3 @ 0x8003
  1017                           ;	unspecified, using default values
  1018     8003                     	org	32771
  1019     8003  3FFF               	dw	16383
  1020                           
  1021                           	psect	config
  1022                           
  1023                           ;Config register CONFIG1 @ 0x8007
  1024                           ;	Oscillator Selection
  1025                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  1026                           ;	Watchdog Timer Enable
  1027                           ;	WDTE = OFF, WDT disabled
  1028                           ;	Power-up Timer Enable
  1029                           ;	PWRTE = ON, PWRT enabled
  1030                           ;	MCLR Pin Function Select
  1031                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  1032                           ;	Flash Program Memory Code Protection
  1033                           ;	CP = OFF, Program memory code protection is disabled
  1034                           ;	Data Memory Code Protection
  1035                           ;	CPD = OFF, Data memory code protection is disabled
  1036                           ;	Brown-out Reset Enable
  1037                           ;	BOREN = ON, Brown-out Reset enabled
  1038                           ;	Clock Out Enable
  1039                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  1040                           ;	Internal/External Switchover
  1041                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1042                           ;	Fail-Safe Clock Monitor Enable
  1043                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1044     8007                     	org	32775
  1045     8007  0FC4               	dw	4036
  1046                           
  1047                           ;Config register CONFIG2 @ 0x8008
  1048                           ;	Flash Memory Self-Write Protection
  1049                           ;	WRT = OFF, Write protection off
  1050                           ;	PLL Enable
  1051                           ;	PLLEN = ON, 4x PLL enabled
  1052                           ;	Stack Overflow/Underflow Reset Enable
  1053                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  1054                           ;	Brown-out Reset Voltage Selection
  1055                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  1056                           ;	Low-Voltage Programming Enable
  1057                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  1058     8008                     	org	32776
  1059     8008  1FFF               	dw	8191

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         1
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6       7
    BANK0            80      0       0
    BANK1            80      0       0
    BANK2            64      0       0
    BANK3             0      0       0
    BANK4             0      0       0

Pointer List with Targets:

    Receive@buf	PTR unsigned char  size(2) Largest target is 128
		 -> Buffer(BIGRAM[128]), 


Critical Paths under _main in COMMON

    _main->_Receive

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     252
                                              5 COMMON     1     1      0
                          _DataWrite
                 _EUSART_is_rx_ready
                            _Receive
 ---------------------------------------------------------------------------------
 (1) _Receive                                              5     3      2     237
                                              0 COMMON     5     3      2
                        _EUSART_Read
                 _EUSART_is_rx_ready
 ---------------------------------------------------------------------------------
 (2) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DataWrite                                            1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DataWrite
   _EUSART_is_rx_ready
   _Receive
     _EUSART_Read
     _EUSART_is_rx_ready

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             160      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       7       2       50.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       7       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               40      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK3                0      0       0      12        0.0%
BITBANK4            20      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK4                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0       7      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sat Aug 19 13:15:38 2023

             DataWrite@data 0070                          l60 0749                          l63 0761  
                        l80 07F0                          l65 0766                          l83 074B  
                        l85 0750                          l69 0773                          l86 0754  
                        u10 0766                          u11 0765                          u20 076B  
                        u21 076A                          u30 076F                          u31 076E  
                        u90 0750                          u91 074F                         l701 0761  
                       l703 076B                         l705 076F                         l801 0774  
                       l707 0770                         l811 0781                         l803 0777  
                       l741 0751                         l709 0772                         l821 078F  
                       l813 0786                         l805 0779                         l823 0797  
                       l815 0789                         l807 077A                         l825 079E  
                       l817 078B                         l809 077C                         l739 074B  
                       l827 07A2                         l819 078D                         l781 07BC  
                       l783 07C2                         l791 07D6                         l775 07AD  
                       l697 0745                         l793 07DD                         l785 07C8  
                       l777 07B0                         l795 07E2                         l787 07CE  
                       l779 07B8                         l797 07E6                         l789 07D2  
                       l799 07EA                         u110 07B8                         u111 07B7  
                       u120 07C2                         u121 07C1                         u130 07C8  
                       u131 07C7                         u140 07DC                         u141 07DB  
                       u150 07F0                         u151 07EF                         u160 0797  
                       u161 0796                         u177 07A5                         wreg 0009  
              ?_EUSART_Read 0070                        _LATA 010C                        _LATB 010D  
                      _WPUA 020C                        _WPUB 020D                        _main 0774  
                      fsr0h 0005                        fsr1h 0007                        indf0 0000  
                      fsr0l 0004                        indf1 0001                        fsr1l 0006  
                      btemp 007E                        start 0003             __end_of_Receive 07F1  
                     ?_main 0070                       _RCREG 0199                       _RCSTA 019D  
                     _SPBRG 019B                       _TRISA 008C                       _TRISB 008D  
                     _TXREG 019A                       _TXSTA 019E                  Receive@buf 0070  
                Receive@cnt 0073                  Receive@rcv 0074                       status 0003  
                     wtemp0 007E             __initialization 07F1                __end_of_main 07AD  
                    ??_main 0075                      _ANSELA 018C                      _ANSELB 018D  
__end_of_EUSART_is_rx_ready 074A                      _OSCCON 0099                      _Buffer 20E0  
                 ??_Receive 0072           __end_of_DataWrite 0755     __end_of__initialization 07FD  
                _g_ReadData 0076              __pcstackCOMMON 0070              _OPTION_REGbits 0095  
                __pmaintext 0774                     _BAUDCON 019F                     _Receive 07AD  
                   __ptext0 0000                     __ptext1 07AD                     __ptext2 0745  
                   __ptext3 0761                     __ptext4 074A                     clrloop0 0756  
      end_of_initialization 07FD                   _RCSTAbits 019D          _EUSART_is_rx_ready 0745  
       ?_EUSART_is_rx_ready 0070        ??_EUSART_is_rx_ready 0070                   _DataWrite 074A  
       start_initialization 07F1               ??_EUSART_Read 0070                  ?_DataWrite 0070  
               __pbssBIGRAM 20E0                 __pbssCOMMON 0076                   ___latbits 0001  
       __end_of_EUSART_Read 0774                    ?_Receive 0070                 ??_DataWrite 0070  
                 clear_ram0 0755                    _PIR1bits 0011                 _EUSART_Read 0761  
